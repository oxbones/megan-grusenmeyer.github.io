////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  //find min and max
  var min = Math.min(start, end);
  var max = Math.max(start, end);
  var arr = [];
  if(step > 0) {
    for (var i = min; i <= max; i+=step) {
      arr.push(i)
    }
  } else if (step <= 0) {
    return [];
  } else if (start === end) {
    return arr;
  } else {
    //loop over range
    for (var j = min; j <= max; j++) {
      //push j into array
      arr.push(j);
    }
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var total = 0
  if (array.length === 0) {
    return 0; 
  } else 
  for (var i = 0; i < array.length; i++) {
    total += array[i];
  }
  return total
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  //constructive version
  var reversedArr = [];
  //loop over array backwards
  for (var i = array.length - 1; i >= 0; i--) {
    //push values of newArr[i] to reversedArr
    reversedArr.push(array[i]);
  }
  return reversedArr; 
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  //destructive version
  var reversedArr = [];
  //loop over array backwards
  for (var i = array.length - 1; i >= 0; i--) {
    //push values of newArr[i] to reversedArr
    reversedArr.push(array[i]);
  }
  //loop over reversedArr
  for(var j = 0; j <= reversedArr.length - 1; j++) {
  //splice reversedArr[i] into arr at i
   array.splice(j, 1, reversedArr[j]);
  }
  return array; 
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  //initial value of rest
  let rest = null;
  //iterate through input array backwards
  for (var i = array.length - 1; i >= 0; i--) {
    rest = {value: array[i], rest}
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(object) {
  //base case
  if (object.rest === null){
    //what to return if we hit base case?
    return object.value;
  } else {
    return [object.value].concat(listToArray(object.rest));
  }
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////

function prepend(element, list) {
  //initial value of rest
  let rest = list;
  //add element to list
  rest = {value: element, rest}
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  //if its 0, return list.value
  if (num === 0) {
    return list.value;
  } else if(list.rest === null) {
    return undefined;
  } else {
  //if its 1, return nth(list.rest, num - 1)
  return nth(list.rest, num - 1);
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  if (a === b) return true;
  
  if (a == null || typeof a != "object" ||
      b == null || typeof b != "object") return false;

  let keysA = Object.keys(a), keysB = Object.keys(b);

  if (keysA.length != keysB.length) return false;

  for (let key of keysA) {
    if (!keysB.includes(key) || !deepEqual(a[key], b[key])) return false;
  }

  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
